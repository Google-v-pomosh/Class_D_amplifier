// Register addresses

#define CLOCK_CONTROL 0x00
#define DEVICE_ID 0x01
#define ERROR_STATUS 0x02
#define SYSTEM_CONTROL_1 0x03
#define SYSTEM_CONTROL_2 0x04
#define SYSTEM_CONTROL_3 0x05
#define SOFT_MUTE 0x06
#define MASTER_VOLUME 0x07
#define CHANNEL1_VOLUME 0x08
#define CHANNEL2_VOLUME 0x09
#define ERROR_STATUS_2 0x0A
#define VOL_FTUNE 0x0B

#define SOFT_RESET 0x0F
#define MODULATION_LIMIT 0x10
#define PWM_A_CHANNEL_DELAY 0x11
#define PWM_B_CHANNEL_DELAY 0x12
#define PWM_C_CHANNEL_DELAY 0x13
#define PWM_D_CHANNEL_DELAY 0x14
#define I2S_CONTROL 0x15
#define DSP_CONTROL_1 0x16
#define MONITOR_PIN_CONFIGURED_1 0x17
#define MONITOR_PIN_CONFIGURED_2 0x18
#define PWM_DIRECT_CURRENT_THRESHOLD 0x19

#define SHORT_CONTROL 0x1B
#define FAULT_OUTPUT_TIME 0x1C

#define OPERATION_MODE 0x1E
#define CHECKSUM_CONTROL 0x1F
#define INPUT_MUX 0x20
#define DSP_CONTROL_2 0x21
#define PWM_CONTROL 0x22
#define FAULT_SELECT 0x23

#define CHANNEL1_EQ_FILTER_CONTROL_1 0x25

#define CHANNEL1_EQ_EN0_SHFT 0
#define CHANNEL1_EQ_EN0_MASK (0x1 << CHANNEL1_EQ_EN0_SHFT)
#define CHANNEL1_EQ_EN0_EN (0x1 << CHANNEL1_EQ_EN0_SHFT)
#define CHANNEL1_EQ_EN0_BYPASS (0x0 << CHANNEL1_EQ_EN0_SHFT)

#define CHANNEL1_EQ_EN1_SHFT 1
#define CHANNEL1_EQ_EN1_MASK (0x1 << CHANNEL1_EQ_EN1_SHFT)
#define CHANNEL1_EQ_EN1_EN (0x1 << CHANNEL1_EQ_EN1_SHFT)
#define CHANNEL1_EQ_EN1_BYPASS (0x0 << CHANNEL1_EQ_EN1_SHFT)

#define CHANNEL1_EQ_EN2_SHFT 2
#define CHANNEL1_EQ_EN2_MASK (0x1 << CHANNEL1_EQ_EN2_SHFT)
#define CHANNEL1_EQ_EN2_EN (0x1 << CHANNEL1_EQ_EN2_SHFT)
#define CHANNEL1_EQ_EN2_BYPASS (0x0 << CHANNEL1_EQ_EN2_SHFT)

#define CHANNEL1_EQ_FILTER_CONTROL_2 0x26
#define CHANNEL2_EQ_FILTER_CONTROL_1 0x27

#define CHANNEL2_EQ_EN0_SHFT 0
#define CHANNEL2_EQ_EN0_MASK (0x1 << CHANNEL2_EQ_EN0_SHFT)
#define CHANNEL2_EQ_EN0_EN (0x1 << CHANNEL2_EQ_EN0_SHFT)
#define CHANNEL2_EQ_EN0_BYPASS (0x0 << CHANNEL2_EQ_EN0_SHFT)

#define CHANNEL2_EQ_EN1_SHFT 1
#define CHANNEL2_EQ_EN1_MASK (0x1 << CHANNEL2_EQ_EN1_SHFT)
#define CHANNEL2_EQ_EN1_EN (0x1 << CHANNEL2_EQ_EN1_SHFT)
#define CHANNEL2_EQ_EN1_BYPASS (0x0 << CHANNEL2_EQ_EN1_SHFT)

#define CHANNEL2_EQ_EN2_SHFT 2
#define CHANNEL2_EQ_EN2_MASK (0x1 << CHANNEL2_EQ_EN2_SHFT)
#define CHANNEL2_EQ_EN2_EN (0x1 << CHANNEL2_EQ_EN2_SHFT)
#define CHANNEL2_EQ_EN2_BYPASS (0x0 << CHANNEL2_EQ_EN2_SHFT)

#define CHANNEL2_EQ_FILTER_CONTROL_2 0x28
#define SPEQ_FILTER_CONTROL_1 0x29
#define SPEQ_FILTER_CONTROL_2 0x2A
#define SPEQ_FILTER_CONTROL_3 0x2B
#define PRESCALER 0x2C
#define POSTSCALER 0x2D

#define SY24145_NO_INVERT 0
#define SY24145_INVERT 1

#define BQ0 0x2F
#define BQ1 0x30
#define BQ2 0x31
#define BQ3 0x32
#define BQ4 0x33
#define BQ5 0x34
#define BQ6 0x35
#define BQ7 0x36
#define BQ8 0x37
#define BQ9 0x38
#define BQ10 0x39
#define BQ11 0x3A
#define BQ12 0x3B
#define BQ13 0x3C
#define BQ14 0x3D
#define BQ15 0x3E
#define BQ16 0x3F
#define BQ17 0x40

#define SPEQ0 0x41
#define SPEQ1 0x42
#define SPEQ2 0x43
#define SPEQ3 0x44
#define SPEQ4 0x45
#define SPEQ5 0x46

#define DRC_BQN0 0x47
#define DRC_BQN1 0x48
#define DRC_BQN2 0x49
#define DRC_BQN3 0x4A
#define DRC_BQN4 0x4B
#define DRC_BQN5 0x4C
#define DRC_BQN6 0x4D
#define DRC_BQN7 0x4E
#define DRC_BQN8 0x4F
#define DRC_BQN9 0x50
#define DRC_BQN10 0x51
#define DRC_BQN11 0x52
#define DRC_BQN12 0x53
#define DRC_BQN13 0x54
#define DRC_BQN14 0x55
#define DRC_BQN15 0x56

#define CHANNEL12_LOUDNESS 0x57

#define SPEQ_ATK_REL_TC_1 0x5D
#define SPEQ_ATK_REL_TC_2 0x5E
#define CH12_MIXER_GAIN 0x5F
#define DRC_CONTROL 0x60
#define DRC1_LMT_CFG1 0x61
#define DRC2_LMT_CFG1 0x64
#define DRC3_LMT_CFG1 0x67
#define DRC4_LMT_CFG1 0x6A
#define DRC1_LMT_CFG2 0x62
#define DRC2_LMT_CFG2 0x65
#define DRC3_LMT_CFG2 0x68
#define DRC4_LMT_CFG2 0x6B
#define DRC1_LMT_CFG3 0x63
#define DRC2_LMT_CFG3 0x66
#define DRC3_LMT_CFG3 0x69
#define DRC4_LMT_CFG3 0x6C
#define DRC_ENVLP_TC_UP 0x6D
#define DRC_ENVLP_TC_DN 0x6E
#define AUTO_MUTE_THRESHOLD 0x6F
#define BIST_CONTROL 0x70
#define PLL_STATUS 0x71
#define PLL_CONTROL 0x72
#define SPK_SEQUENCE_BYPASS 0x73
#define FUNC_TEST 0x74
#define TM_BY_REG 0x75
#define PROTECTION_SYSTEM_CONTROL 0x76
#define I2C_CONTROL 0x77
#define HARD_CLIPPER_THR 0x78

#define OSCILLATOR_TRIM_CONTROL 0x7B
#define OSCILLATOR_TRIM_REGISTER1 0x7C
#define OSCILLATOR_TRIM_REGISTER2 0x7D
#define ANALOG_REF_TOP_CONTROL 0x7E

#define DSP_3D_COEF 0x80
#define DSP_3D_MIX 0x81
#define INTER_PRIVATE 0x82
#define DRC_FTUNE 0x83

#define OC_DETECT_WINDOW_WIDTH 0x85
#define FAULT_OVER_CURRENT_THRESHOLD 0x86

#define ERROR_DC_STATUS 0x89

#define DSP_CONTROL_3 0x8B
#define FUNC_DEBUG 0x8C

#define DRC1_ENVLP_TC_UP 0x8E
#define DRC1_ENVLP_TC_DN 0x8F
#define DRC2_ENVLP_TC_UP 0x90
#define DRC2_ENVLP_TC_DN 0x91
#define DRC3_ENVLP_TC_UP 0x92
#define DRC3_ENVLP_TC_DN 0x93
#define PWM_MUX 0x94
#define PWM_OUTFLIP_1 0x95
#define PWM_OUTFLIP_2 0x96
#define PM_COEF 0x97
#define POWER_METER_CONTROL_RB1 0x98
#define POWER_METER_CONTROL_RB2 0x99
#define PBQ_CHECKSUM 0x9A
#define MDRC_CHECKSUM 0x9B
#define PBQ_CH2_CHECKSUM 0x9C

#define CMD_WRITE_ADDR_SEL_PD 0x54
#define CMD_WRITE_ADDR_SEL_PU 0x56

#define CMD_READ_ADDR_SEL_PD 0x55
#define CMD_READ_ADDR_SEL_PU 0x57

/* Clock control register (0x00) */
#define FS_RATE_CNFG_SHFT 2
#define FS_RATE_CNFG_MASK (0x3 << FS_RATE_CNFG_SHFT)
#define FS_RATE_CNFG_32kHZ (0x0 << FS_RATE_CNFG_SHFT)
#define FS_RATE_CNFG_96kHZ (0x1 << FS_RATE_CNFG_SHFT)
#define FS_RATE_CNFG_441_48kHZ (0x2 << FS_RATE_CNFG_SHFT)

#define FS_CNFG_MANUAL_EN_SHFT 4
#define FS_CNFG_MANUAL_EN_MASK (0x1 << FS_CNFG_MANUAL_EN_SHFT)
#define FS_CNFG_MANUAL_EN_AUTO_DETECT_SR (0x0 << FS_CNFG_MANUAL_EN_SHFT)
#define FS_CNFG_MANUAL_EN_CONFIG_SR (0x1 << FS_CNFG_MANUAL_EN_SHFT)

#define BRT_SEL_SHFT 7
#define BRT_SEL_MASK (0x1 << BRT_SEL_SHFT)
#define BRT_SEL_48kHZ (0x0 << BRT_SEL_SHFT)
#define BRT_SEL_441kHZ (0x1 << BRT_SEL_SHFT)

/* Error status register (0x02) */
#define ERROR_STATUS_OTF (0x1 << 0)
#define ERROR_STATUS_OCF (0x1 << 1)
#define ERROR_STATUS_SF (0x1 << 2)
#define ERROR_STATUS_PWM_DE (0x1 << 3)
#define ERROR_STATUS_LRCLKE (0x1 << 4)
#define ERROR_STATUS_SCLKE (0x1 << 5)
#define ERROR_STATUS_DRC_CE (0x1 << 6)
#define ERROR_STATUS_PCE (0x1 << 7)
/* Error status register (0x02) */

/* System control register 1 (0x03) */
#define I2C_ACCESS_COEF_RAM_EN_SHFT 0
#define IACRE_DAP_ACCESS (0x0 << I2C_ACCESS_COEF_RAM_EN_SHFT)
#define IACRE_I2C_ACCESS (0x1 << I2C_ACCESS_COEF_RAM_EN_SHFT)

#define RAM_CH2_EN_SHFT 1
#define RCE2_I2C_WR_ON (0x1 << RAM_CH2_EN_SHFT)
#define RCE2_I2C_WR_OFF (0x0 << RAM_CH2_EN_SHFT)

#define RAM_CH1_EN_SHFT 2
#define RCE1_I2C_WR_ON (0x1 << RAM_CH1_EN_SHFT)
#define RCE1_I2C_WR_OFF (0x0 << RAM_CH1_EN_SHFT)

#define DSP_FADE_EN_SHFT 3
#define DFER_FADE_DIS (0x0 << DSP_FADE_EN_SHFT)
#define DFER_FADE_EN (0x1 << DSP_FADE_EN_SHFT)

#define DC_SOFT_RESET_EN_SHFT 4
#define DC_SRE_DIS (0x0 << DC_SOFT_RESET_EN_SHFT)
#define DC_SOFT_EN (0x1 << DC_SOFT_RESET_EN_SHFT)

#define READ_BQ_COEF_CH_SELECT 5
#define RBCCS_READ_CH1 (0x0 << READ_BQ_COEF_CH_SELECT)
#define RBCSS_READ_CH2 (0x1 << READ_BQ_COEF_CH_SELECT)

#define DSP_SOFT_RESET_EN_SHFT 6
#define DSP_SRE_DIS (0x0 << DSP_SOFT_RESET_EN_SHFT)
#define DSP_SRE_EN (0x1 << DSP_SOFT_RESET_EN_SHFT)

#define DSP_FORCE_RESET_EN_SHFT 7
#define DSP_FRE_DIS (0x0 << DSP_FORCE_RESET_EN_SHFT)
#define DSP_FRE_EN (0x1 << DSP_FORCE_RESET_EN_SHFT)

/* Sysytem control register 2 (0x04) */
#define LOUDNESS_EN_SHFT 0
#define LOUDNESS_EN_MASK (0x1 << LOUDNESS_EN_SHFT)
#define LOUDNESS_DIS (0x0 << LOUDNESS_EN_SHFT)
#define LOUDNESS_EN (0x1 << LOUDNESS_EN_SHFT)

#define POWER_METER_EN_SHFT 1
#define POWER_METER_DIS (0x0 << POWER_METER_EN_SHFT)
#define POWER_METER_EN (0x1 << POWER_METER_EN_SHFT)

#define MIXER_EN_SHFT 2
#define MIXER_DIS (0x0 << MIXER_EN_SHFT)
#define MIXER_EN (0x1 << MIXER_EN_SHFT)

#define DC_EN_POST_SHFT 3
#define DC_DIS_POST (0x0 << DC_EN_POST_SHFT)
#define DC_EN_POST (0x1 << DC_EN_POST_SHFT)

#define EQ_EN_SHFT 4
#define EQ_DIS (0x0 << EQ_EN_SHFT)
#define EQ_EN (0x1 << EQ_EN_SHFT)

#define DC_EN_PRE_SHFT 5
#define DC_DIS_PRE (0x0 << DC_EN_PRE_SHFT)
#define DC_EN_PRE (0x01 << DC_EN_PRE_SHFT)

#define AVDD_UV_RST_EN_SHFT 6
#define AVDD_UV_RST_DIS (0x0 << AVDD_UV_RST_EN_SHFT)
#define AVDD_UV_RST_EN (0x1 << AVDD_UV_RST_EN_SHFT)

#define DYN_OFF_SPEQ_EN_SHFT 7
#define DYN_OFF_SPEQ_TURN_OFF (0x0 << DYN_OFF_SPEQ_EN_SHFT)
#define DYN_OFF_SPEQ_NOT_TURN_OFF (0x1 << DYN_OFF_SPEQ_EN_SHFT)

/* Sysytem control register 3 (0x05) */
#define ADDR_SEL_MODE_SHFT 0
#define ADDR_SEL_MODE_FIXED (0x0 << ADDR_SEL_MODE_SHFT)
#define ADDR_SEL_MODE_CHANGED (0x1 << ADDR_SEL_MODE_SHFT)

#define SOLD_RATE_SEL_SHFT 1
#define SOLD_RATE_73MS (0x0 << SOLD_RATE_SEL_SHFT)
#define SOLD_RATE_147MS (0x1 << SOLD_RATE_SEL_SHFT)
#define SOLD_RATE_295MS (0x2 << SOLD_RATE_SEL_SHFT)
#define SOLD_RATE_588MS (0x3 << SOLD_RATE_SEL_SHFT)

#define DELAY_LINE_LGTH_SHFT 3
int get_delay_line_lgth(int length)
{
	return (length << DELAY_LINE_LGTH_SHFT);
}
#define DELAY_LINE_LGTH(length) get_delay_line_lgth(length)

/* Soft mute register (0x06) */
#define DSP_DVOL_MUTE_LEFT_SHFT 0
#define DSP_DVOL_MUTE_LEFT_MASK (0x1 << DSP_DVOL_MUTE_LEFT_SHFT)
#define DSP_DVOL_UNMUTE_LEFT (0x0 << DSP_DVOL_MUTE_LEFT_SHFT)
#define DSP_DVOL_MUTE_LEFT (0x1 << DSP_DVOL_MUTE_LEFT_SHFT)

#define DSP_DVOL_MUTE_RIGHT_SHFT 1
#define DSP_DVOL_MUTE_RIGHT_MASK (0x1 << DSP_DVOL_MUTE_RIGHT_SHFT)
#define DSP_DVOL_UNMUTE_RIGHT (0x0 << DSP_DVOL_MUTE_RIGHT_SHFT)
#define DSP_DVOL_MUTE_RIGHT (0x1 << DSP_DVOL_MUTE_RIGHT_SHFT)

#define DSP_MVOL_MUTE_SHFT 3
#define DSP_MVOL_MASK (0x1 << DSP_MVOL_MUTE_SHFT)
#define DSP_MVOL_UNMUTE (0x0 << DSP_MVOL_MUTE_SHFT)
#define DSP_MVOL_MUTE (0x1 << DSP_MVOL_MUTE_SHFT)

#define HARD_SOFT_UNMUTE_SHFT 4
#define HARD_SOFT_UNMUTE_MASK	(0x1 << HARD_SOFT_UNMUTE_SHFT)
#define SOFT_UNMUTE_FROM_CLK_ERR (0x0 << HARD_SOFT_UNMUTE_SHFT)
#define HARD_UNMUTE_FROM_CLK_ERR (0x1 << HARD_SOFT_UNMUTE_SHFT)

#define I2C_ACCESS_RAM_MUTE_STBY_EN_SHFT 5
#define I2C_ACCESS_RAM_MUTE_STBY_DIS (0x0 << I2C_ACCESS_RAM_MUTE_STBY_EN_SHFT)
#define I2C_ACCESS_RAM_MUTE_STBY_EN (0x1 << I2C_ACCESS_RAM_MUTE_STBY_EN_SHFT)

/* Modulation limit register (0x10) */

/* Master volume (0x07) */
#define MASTER_VOLUME_MASK (0xFF)
/* Master volume (0x07) */

/* Channel 1(0x08) and 2(0x09) volume  */
#define CHANNEL_VOLUME_MASK (0xFF)
/* Channel 1(0x08) and 2(0x09) volume  */

/* Erorr status register2 (0x0A) */
#define ERROR_STATUS_SLEF (0x1 << 0)
#define ERROR_STATUS_OLEF (0x1 << 1)
/* Erorr status register2 (0x0A) */

/* Soft reset register (0x0F) */

#define DC_SOFT_RESET_SHFT 0
#define DC_SOFT_RESET_MASK (0x1 << DC_EN_POST_SHFT)
#define DC_SOFT_RESET (0x1 << DC_EN_POST_SHFT)

#define DSP_SOFT_RESET_SHFT 4
#define DSP_SOFT_RESET_MASK (0x1 << DSP_SOFT_RESET_SHFT)
#define DSP_SOFT_RESET (0x1 << DSP_SOFT_RESET_SHFT)

/* I2S Control (0x15) */
#define I2S_VBITS_SHFT 0
#define I2S_VBITS_MASK (0x3 << I2S_VBITS_SHFT)
#define I2S_VBITS_24 (0x0 << I2S_VBITS_SHFT)
#define I2S_VBITS_20 (0x1 << I2S_VBITS_SHFT)
#define I2S_VBITS_18 (0x2 << I2S_VBITS_SHFT)
#define I2S_VBITS_16 (0x3 << I2S_VBITS_SHFT)

#define I2S_FMT_SHFT 2
#define I2S_FMT_MASK (0x2 << I2S_FMT_SHFT)
#define I2S_FMT_I2S (0x0 << I2S_FMT_SHFT)
#define I2S_FMT_LJ (0x1 << I2S_FMT_SHFT)
#define I2S_FMT_RJ (0x2 << I2S_FMT_SHFT)

#define I2S_EN_SHFT 4
#define I2S_DIS (0x0 << I2S_EN_SHFT)
#define I2S_EN (0x1 << I2S_EN_SHFT)

#define I2S_LR_POLARITY_SHFT 5
#define I2S_LR_POLARITY_MASK (0x1 << I2S_LR_POLARITY_SHFT)
#define I2S_LR_POLARITY_NOT_INVERT (0x0 << I2S_LR_POLARITY_SHFT)
#define I2S_LR_POLARITY_INVERT (0x1 << I2S_LR_POLARITY_SHFT)

#define I2S_SCLK_INV_SHFT 6
#define I2S_SCLK_INV_MASK (0x1 << I2S_SCLK_INV_SHFT)
#define I2S_SCLK_NOT_INVERT (0x0 << I2S_SCLK_INV_SHFT)
#define I2S_SCLK_INVERT (0x1 << I2S_SCLK_INV_SHFT)

/* DSP Control register 1 (0x16) */
#define CH2_EN_SHFT 1
#define CH2_DIS (0x0 << CH2_EN_SHFT)
#define CH2_EN (0x1 << CH2_EN_SHFT)

#define CH1_EN_SHFT 2
#define CH1_DIS (0x0 << CH1_EN_SHFT)
#define CH1_EN (0x1 << CH1_EN_SHFT)

#define DSP_FADE_TIME_SEL_SHFT 3
#define DSP_FADE_TIME_SEL_X1 (0x0 << DSP_FADE_TIME_SEL_SHFT)
#define DSP_FADE_TIME_SEL_X2 (0x1 << DSP_FADE_TIME_SEL_SHFT)
#define DSP_FADE_TIME_SEL_X4 (0x2 << DSP_FADE_TIME_SEL_SHFT)
#define DSP_FADE_TIME_SEL_X8 (0x3 << DSP_FADE_TIME_SEL_SHFT)

// FRS ???

/* Monitor Pin configured Register 1 (0x17) */

#define MONITOR0_CFG_SHFT 0
#define MONITOR0_CFG_I2S_DATA_OUT (0x0 << MONITOR0_CFG_SHFT)
#define MONITOR0_CFG_PWM_OUT_A (0x1 << MONITOR0_CFG_SHFT)
#define MONITOR0_CFG_PWM_OUT_B (0x2 << MONITOR0_CFG_SHFT)
#define MONITOR0_CFG_PWM_OUT_C (0x3 << MONITOR0_CFG_SHFT)
#define MONITOR0_CFG_PWM_OUT_D (0x4 << MONITOR0_CFG_SHFT)
#define MONITOR0_CFG_STBYB (0x5 << MONITOR0_CFG_SHFT)
#define MONITOR0_CFG_FAULT_CLR_READY (0x6 << MONITOR0_CFG_SHFT)
#define MONITOR0_CFG_PLL_LOCKED (0x7 << MONITOR0_CFG_SHFT)
#define MONITOR0_CFG_HP_EN (0x8 << MONITOR0_CFG_SHFT)
#define MONITOR0_CFG_A2D_OSC_CLK (0x9 << MONITOR0_CFG_SHFT)
#define MONITOR0_CFG_PLL_DIV32 (0xA << MONITOR0_CFG_SHFT)
#define MONITOR0_CFG_FAULT_PIN_STAT (0xB << MONITOR0_CFG_SHFT)
#define MONITOR0_CFG_FAULT_SHORT (0xC << MONITOR0_CFG_SHFT)
#define MONITOR0_CFG_SHDWB (0xE << MONITOR0_CFG_SHFT)
#define MONITOR0_CFG_FAULT_OC (0xF << MONITOR0_CFG_SHFT)

#define SDA_OUT_LOC_SHFT 4
#define SDA_OUT_LOC_PRIOR (0x1 << SDA_OUT_LOC_SHFT)
#define SDA_OUT_LOC_BEHIND (0x0 << SDA_OUT_LOC_SHFT)

#define MONITOR2_EN_SHFT 5
#define MONITOR2_DIS (0x0 << MONITOR2_EN_SHFT)
#define MONITOR2_EN (0x1 << MONITOR2_EN_SHFT)

#define MONITOR1_EN_SHFT 6
#define MONITOR1_DIS (0x0 << MONITOR1_EN_SHFT)
#define MONITOR1_EN (0x1 << MONITOR1_EN_SHFT)

#define MONITOR0_EN_SHFT 7
#define MONITOR0_DIS (0x0 << MONITOR0_EN_SHFT)
#define MONITOR0_EN (0x1 << MONITOR0_EN_SHFT)

/* Monitor Pin configured Register 2 (0x18) */
#define MONITOR2_CFG_SHFT 0
#define MONITOR2_CFG_I2S_DATA_OUT (0x0 << MONITOR2_CFG_SHFT)
#define MONITOR2_CFG_PWM_OUT_A (0x1 << MONITOR2_CFG_SHFT)
#define MONITOR2_CFG_PWM_OUT_B (0x2 << MONITOR2_CFG_SHFT)
#define MONITOR2_CFG_PWM_OUT_C (0x3 << MONITOR2_CFG_SHFT)
#define MONITOR2_CFG_PWM_OUT_D (0x4 << MONITOR2_CFG_SHFT)
#define MONITOR2_CFG_STBYB (0x5 << MONITOR2_CFG_SHFT)
#define MONITOR2_CFG_FAULT_CLR_READY (0x6 << MONITOR2_CFG_SHFT)
#define MONITOR2_CFG_PLL_LOCKED (0x7 << MONITOR2_CFG_SHFT)
#define MONITOR2_CFG_HP_EN (0x8 << MONITOR2_CFG_SHFT)
#define MONITOR2_CFG_A2D_OSC_CLK (0x9 << MONITOR2_CFG_SHFT)
#define MONITOR2_CFG_PLL_DIV32 (0xA << MONITOR2_CFG_SHFT)
#define MONITOR2_CFG_FAULT_PIN_STAT (0xB << MONITOR2_CFG_SHFT)
#define MONITOR2_CFG_FAULT_SHORT (0xC << MONITOR2_CFG_SHFT)
#define MONITOR2_CFG_SHDWB (0xE << MONITOR2_CFG_SHFT)
#define MONITOR2_CFG_FAULT_OC (0xF << MONITOR2_CFG_SHFT)

#define MONITOR1_CFG_SHFT 4
#define MONITOR1_CFG_I2S_DATA_OUT (0x0 << MONITOR1_CFG_SHFT)
#define MONITOR1_CFG_PWM_OUT_A (0x1 << MONITOR1_CFG_SHFT)
#define MONITOR1_CFG_PWM_OUT_B (0x2 << MONITOR1_CFG_SHFT)
#define MONITOR1_CFG_PWM_OUT_C (0x3 << MONITOR1_CFG_SHFT)
#define MONITOR1_CFG_PWM_OUT_D (0x4 << MONITOR1_CFG_SHFT)
#define MONITOR1_CFG_STBYB (0x5 << MONITOR1_CFG_SHFT)
#define MONITOR1_CFG_FAULT_CLR_READY (0x6 << MONITOR1_CFG_SHFT)
#define MONITOR1_CFG_PLL_LOCKED (0x7 << MONITOR1_CFG_SHFT)
#define MONITOR1_CFG_HP_EN (0x8 << MONITOR1_CFG_SHFT)
#define MONITOR1_CFG_A2D_OSC_CLK (0x9 << MONITOR1_CFG_SHFT)
#define MONITOR1_CFG_PLL_DIV32 (0xA << MONITOR1_CFG_SHFT)
#define MONITOR1_CFG_FAULT_PIN_STAT (0xB << MONITOR1_CFG_SHFT)
#define MONITOR1_CFG_FAULT_SHORT (0xC << MONITOR1_CFG_SHFT)
#define MONITOR1_CFG_SHDWB (0xE << MONITOR1_CFG_SHFT)
#define MONITOR1_CFG_FAULT_OC (0xF << MONITOR1_CFG_SHFT)

/* PWM Control register (0x22) */
#define PWM_CONTROL_STANDBY_SHFT 4
#define PWM_CONTROL_STANDBY_MASK (0x1 << PWM_CONTROL_STANDBY_SHFT)
#define PWM_CONTROL_STANDBY_ENTER (0x1 << PWM_CONTROL_STANDBY_SHFT)
#define PWM_CONTROL_STANDBY_EXIT (0x0 << PWM_CONTROL_STANDBY_SHFT)

#define PWM_CONTROL_SHUTDOWN_SHFT 5
#define PWM_CONTROL_SHUTDOWN_MASK (0x1 << PWM_CONTROL_SHUTDOWN_SHFT)
#define PWM_CONTROL_SHUTDOWN_ENTER (0x1 << PWM_CONTROL_SHUTDOWN_SHFT)
#define PWM_CONTROL_SHUTDOWN_EXIT (0x0 << PWM_CONTROL_SHUTDOWN_SHFT)
/* PWM Control register (0x22) */

/* Prescaler (0x2C) */
#define PRESCALER_MASK (0xFFFF)
/* Prescaler (0x2C) */

/* Postscaler (0x2D) */
#define POSTSCALER_MASK (0xFFFF)
/* Postscaler (0x2D) */

/* Error status (0x89) */
#define ERROR_STATUS_PPEC2 (0x1 << 0)
#define ERROR_STATUS_PNEC2 (0x1 << 1)
#define ERROR_STATUS_PPEC1 (0x1 << 2)
#define ERROR_STATUS_PNEC1 (0x1 << 3)
/* Error status (0x89) */
